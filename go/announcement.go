// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     announcement.avsc
 */
package examples

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Announcement struct {
	Author string `json:"author"`

	Message string `json:"message"`
}

const AnnouncementAvroCRC64Fingerprint = "vI\x83zf\xe3\x03:"

func NewAnnouncement() Announcement {
	r := Announcement{}
	return r
}

func DeserializeAnnouncement(r io.Reader) (Announcement, error) {
	t := NewAnnouncement()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAnnouncementFromSchema(r io.Reader, schema string) (Announcement, error) {
	t := NewAnnouncement()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAnnouncement(r Announcement, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Author, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Message, w)
	if err != nil {
		return err
	}
	return err
}

func (r Announcement) Serialize(w io.Writer) error {
	return writeAnnouncement(r, w)
}

func (r Announcement) Schema() string {
	return "{\"fields\":[{\"name\":\"author\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"examples.avro.Announcement\",\"type\":\"record\"}"
}

func (r Announcement) SchemaName() string {
	return "examples.avro.Announcement"
}

func (_ Announcement) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Announcement) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Announcement) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Announcement) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Announcement) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Announcement) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Announcement) SetString(v string)   { panic("Unsupported operation") }
func (_ Announcement) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Announcement) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Author}

		return w

	case 1:
		w := types.String{Target: &r.Message}

		return w

	}
	panic("Unknown field index")
}

func (r *Announcement) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Announcement) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Announcement) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Announcement) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Announcement) HintSize(int)                     { panic("Unsupported operation") }
func (_ Announcement) Finalize()                        {}

func (_ Announcement) AvroCRC64Fingerprint() []byte {
	return []byte(AnnouncementAvroCRC64Fingerprint)
}

func (r Announcement) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["author"], err = json.Marshal(r.Author)
	if err != nil {
		return nil, err
	}
	output["message"], err = json.Marshal(r.Message)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Announcement) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["author"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Author); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for author")
	}
	val = func() json.RawMessage {
		if v, ok := fields["message"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Message); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for message")
	}
	return nil
}
